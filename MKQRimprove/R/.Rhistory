z <- qt(vFrank(x, df, delta, u = tau), df)
mu + sigma*z
}
n <- 200 # 样本量
df <- 8   # 自由度
delta <- 8 # 初始参数
set.seed(1989)
x <- sort(rt(n,df)) # 生成基于T分布的随机数
v <- vFrank(x, df, delta, u = runif(n)) # 基于x生成理论上的非参数对应值
y <- qt(v, df)                           # v 对应的T分布统计量
windows(5,5)
plot(x, y, pch="o", col="blue", cex = .25) # 散点图
Dat <- data.frame(x = x, y = y)            # 基本数据集
us <- c(.25,.5,.75)
for(i in 1:length(us)){
v <- vFrank(x, df, delta, u = us[i])
lines(x, qt(v,df)) # v为概率，计算每个概率对应的T分布统计量
}
cfMat <- matrix(0, 3, length(us)+1) # 初始矩阵，用于保存结果的系数
for(i in 1:length(us)) {
tau <- us[i]
cat("tau = ", format(tau), ".. ")
fit <- nlrq(y ~ FrankModel(x, delta,mu,sigma, df = 8, tau = tau), # 非参数模型
data = Dat, tau = tau, # data表明数据集,tau分位数回归的分位点
start= list(delta=5, mu = 0, sigma = 1), # 初始值
trace = T) # 每次运行后是否把结果显示出来
lines(x, predict(fit, newdata=x), lty=2, col="red") # 绘制预测曲线
cfMat[i,1] <- tau   # 保存分位点的值
cfMat[i,2:4] <- coef(fit)    # 保存系数到cfMat矩阵的第i行
cat("\n")                # 如果前面把每步的结果显示出来，则每次的结果之间添加换行符
}
colnames(cfMat) <- c("分位点",names(coef(fit))) # 给保存系数的矩阵添加列名
cfMat
library(quantreg)
## Demo of nonlinear quantile regression model based on Frank copula
vFrank <- function(x, df, delta, u) # 某个非线性过程，得到的是[0,1]的值
-log(1-(1-exp(-delta))/(1+exp(-delta*pt(x,df))*((1/u)-1)))/delta
# 非线性模型
FrankModel <- function(x, delta, mu,sigma, df, tau) {
z <- qt(vFrank(x, df, delta, u = tau), df)
mu + sigma*z
}
n <- 200 # 样本量
df <- 8   # 自由度
delta <- 8 # 初始参数
set.seed(1989)
x <- sort(rt(n,df)) # 生成基于T分布的随机数
v <- vFrank(x, df, delta, u = runif(n)) # 基于x生成理论上的非参数对应值
y <- qt(v, df)                           # v 对应的T分布统计量
windows(5,5)
plot(x, y, pch="o", col="blue", cex = .25) # 散点图
Dat <- data.frame(x = x, y = y)            # 基本数据集
us <- c(.25,.5,.75)
for(i in 1:length(us)){
v <- vFrank(x, df, delta, u = us[i])
lines(x, qt(v,df)) # v为概率，计算每个概率对应的T分布统计量
}
cfMat <- matrix(0, 3, length(us)+1) # 初始矩阵，用于保存结果的系数
for(i in 1:length(us)) {
tau <- us[i]
cat("tau = ", format(tau), ".. ")
fit <- nlrq(y ~ FrankModel(x, delta,mu,sigma, df = 8, tau = tau), # 非参数模型
data = Dat, tau = tau, # data表明数据集,tau分位数回归的分位点
start= list(delta=5, mu = 0, sigma = 1), # 初始值
trace = T) # 每次运行后是否把结果显示出来
lines(x, predict(fit, newdata=x), lty=2, col="red") # 绘制预测曲线
cfMat[i,1] <- tau   # 保存分位点的值
cfMat[i,2:4] <- coef(fit)    # 保存系数到cfMat矩阵的第i行
cat("\n")                # 如果前面把每步的结果显示出来，则每次的结果之间添加换行符
}
colnames(cfMat) <- c("分位点",names(coef(fit))) # 给保存系数的矩阵添加列名
cfMat
n <- 200 # 样本量
df <- 8   # 自由度
delta <- 8 # 初始参数
set.seed(1989)
x <- sort(rt(n,df)) # 生成基于T分布的随机数
v <- vFrank(x, df, delta, u = runif(n)) # 基于x生成理论上的非参数对应值
y <- qt(v, df)                           # v 对应的T分布统计量
windows(5,5)
plot(x, y, pch="o", col="blue", cex = .25) # 散点图
Dat <- data.frame(x = x, y = y)            # 基本数据集
us <- c(.25,.5,.75)
for(i in 1:length(us)){
v <- vFrank(x, df, delta, u = us[i])
lines(x, qt(v,df)) # v为概率，计算每个概率对应的T分布统计量
}
v
cfMat <- matrix(0, 3, length(us)+1) # 初始矩阵，用于保存结果的系数
for(i in 1:length(us)) {
tau <- us[i]
cat("tau = ", format(tau), ".. ")
fit <- nlrq(y ~ FrankModel(x, delta,mu,sigma, df = 8, tau = tau), # 非参数模型
data = Dat, tau = tau, # data表明数据集,tau分位数回归的分位点
start= list(delta=5, mu = 0, sigma = 1), # 初始值
trace = T) # 每次运行后是否把结果显示出来
lines(x, predict(fit, newdata=x), lty=2, col="red") # 绘制预测曲线
cfMat[i,1] <- tau   # 保存分位点的值
cfMat[i,2:4] <- coef(fit)    # 保存系数到cfMat矩阵的第i行
cat("\n")                # 如果前面把每步的结果显示出来，则每次的结果之间添加换行符
}
colnames(cfMat) <- c("分位点",names(coef(fit))) # 给保存系数的矩阵添加列名
cfMat
source('~/统计实践与高维/统计咨询与实践/第二次作业/code/mcycle数据集局部多项式回归.R', encoding = 'UTF-8')
library(KernSmooth)
library(MASS)
library(locfit)
data("mcycle")
x <- mcycle[,1]
y <- mcycle[,2]
lprSMOOTH <- function(h, y, x, t) {
n <- length(y)
s.hat <- rep(0, n)
for (i in 1:n) {
weight <- dnorm((x - t)/h)
mod <- lm(y ~ x, weights = weight)
s.hat[i] <- as.numeric(predict(mod, data.frame(x = t)))
}
return(s.hat)
}
CVRSS <- function(h, y, x) {
cv <- NULL
for (i in seq(x)) {
cv[i] <- (y[i] - lprSMOOTH(h, y[-i], x[-i], x[i]))^2
}
mean(cv)
}
h <- seq(0.001, 0.03, by = 0.001)
cvrss.val <- rep(0, length(h))
for (i in seq(h)) {
cvrss.val[i] <- CVRSS(h[i], y, x)
}
plot(h, cvrss.val, type = "b")
LPRSMOOTH <- function(y, x, h) {
n <- length(y)
s.hat <- rep(0, n)
for (i in 1:n) {
weight <- dnorm((x - x[i])/h)
mod <- lm(y ~ x, weights = weight)
s.hat[i] <- as.numeric(predict(mod, data.frame(x = x[i])))
}
return(s.hat)
}
par(mfrow=c(2,2))
h <- 0.001
LPRsmooth.val1 <- LPRSMOOTH(y, x, h)
plot(x, y, xlab = "Predictor", ylab = "Response", col = 1,main = "mcycleȡh=0.001???ֲ?????ʽ??")
lines(x, LPRsmooth.val1, col = 2)
h <- 0.01
LPRsmooth.val2 <- LPRSMOOTH(y, x, h)
plot(x, y, xlab = "Predictor", ylab = "Response", col = 1,main = "mcycleȡh=0.01???ֲ?????ʽ??")
lines(x, LPRsmooth.val2, col = 3)
h <- 0.02
LPRsmooth.val3 <- LPRSMOOTH(y, x, h)
plot(x, y, xlab = "Predictor", ylab = "Response", col = 1,main = "mcycleȡh=0.02???ֲ?????ʽ??")
lines(x, LPRsmooth.val3, col = 4)
h <- 0.05
LPRsmooth.val4 <- LPRSMOOTH(y, x, h)
plot(x, y, xlab = "Predictor", ylab = "Response", col = 1,main = "mcycleȡh=0.05???ֲ?????ʽ??")
lines(x, LPRsmooth.val4, col = 5)
library(roxygen2)
load_pkgload("C:/Users/user/Documents/Graduation Project/code2")
install.packages("xtable")
library(xtable)
methods(xtable)
xalign(precip)
xdigits(precip)
xdisplay(precip)
## Load example dataset
data(tli)
## Demonstrate data.frame
tli.table <- xtable(tli[1:20, ])
print(tli.table)
print(tli.table, type = "html")
xtable(mtcars)
xtable(mtcars, auto = TRUE)
tli.table <- xtable(tli[1:20, ])
display(tli.table)[c(2,6)] <- "f"
digits(tli.table) <- matrix(0:4, nrow = 20, ncol = ncol(tli)+1)
print(tli.table)
print(tli.table, type = "html")
df <- data.frame(A = c(1.00123, 33.1, 6),
B = c(111111, 3333333, 3123.233))
## The following code gives the error
## formal argument "digits" matched by multiple actual arguments
## print(xtable(df, display = c("s","e","e")),
## format.args = list(digits = 3, big.mark = " ", decimal.mark = ","))
## specify digits as argument to xtable instead
print(xtable(df, display = c("s","f","f"), digits = 4),
format.args = list(big.mark = " ", decimal.mark = ","))
## The following code gives the error
## formal argument "format" matched by multiple actual arguments
## print(xtable(df, digits = 4),
## format.args = list(format = c("s","e","e"),
## big.mark = " ", decimal.mark = ","))
## specify format using display argument in xtable
print(xtable(df, display = c("s","e","e"), digits = 4),
format.args = list(big.mark = " ", decimal.mark = ","))
## Load example dataset
data(tli)
## Demonstrate data.frame
tli.table <- xtable(tli[1:20, ])
print(tli.table)
print(tli.table, type = "html")
xtable(mtcars)
xtable(mtcars, auto = TRUE)
## Demonstrate data.frame with different digits in cells
tli.table <- xtable(tli[1:20, ])
display(tli.table)[c(2,6)] <- "f"
digits(tli.table) <- matrix(0:4, nrow = 20, ncol = ncol(tli)+1)
print(tli.table)
design.matrix <- model.matrix(~ sex*grade, data = tli[1:20, ])
design.table <- xtable(design.matrix, auto = TRUE)
print(design.table)
fm1 <- aov(tlimth ~ sex + ethnicty + grade + disadvg, data = tli)
fm1.table <- xtable(fm1)
print(fm1.table)
## Demonstrate aov
## Taken from help(aov) in R 1.1.1
## From Venables and Ripley (1997) p.210.
N <- c(0,1,0,1,1,1,0,0,0,1,1,0,1,1,0,0,1,0,1,0,1,1,0,0)
P <- c(1,1,0,0,0,1,0,1,1,1,0,0,0,1,0,1,1,0,0,1,0,1,1,0)
K <- c(1,0,0,1,0,1,1,0,0,1,0,1,0,1,1,0,0,0,1,1,1,0,1,0)
yield <- c(49.5,62.8,46.8,57.0,59.8,58.5,55.5,56.0,62.8,55.8,69.5,55.0,
62.0,48.8,45.5,44.2,52.0,51.5,49.8,48.8,57.2,59.0,53.2,56.0)
npk <- data.frame(block = gl(6,4), N = factor(N), P = factor(P),
K = factor(K), yield = yield)
npk.aov <- aov(yield ~ block + N*P*K, npk)
op <- options(contrasts = c("contr.helmert", "contr.treatment"))
npk.aovE <- aov(yield ~  N*P*K + Error(block), npk)
options(op)
summary(npk.aov)
print(xtable(npk.aov))
print(xtable(anova(npk.aov)))
print(xtable(summary(npk.aov)))
bh1 <- c(0.007,0.006,0.013,0.036,0.109,0.005,0.001)
se1 <- c(0.226,0.064,0.047,0.101,0.118,0.079,0.055)
bh1^2+se1^2
bh1^2+se1^2
bh2 <- c(0.004,0.002,0.001,0.025,0.040,0.003,0.007)
se2 <- c(0.160,0.058,0.044,0.044,0.086,0.112,0.059)
bh2^2+se2^2
bh3 <- c(0.006,0.002,0.002,0.039,0.014,0.001,0.011)
se3 <- c(0.222,0.067,0.048,0.102,0.140,0.076,0.064)
bh3^2+se3^2
bh4 <- c(0.043,0.016,0.012,0.025,0.097,0.002,0.002)
se4 <- c(0.102,0.025,0.024,0.105,0.156,0.062,0.079)
bh4^2+se4^2
bh5 <- c(0,0,0.002,0.028,0.047,0.004,0.011)
se5 <- c(0.085,0.025,0.019,0.17,0.088,0.083,0.059)
bh5^2+se5^2
bh6 <- c(0.034,0.014,0.017,0.056,0.036,0.005,0.018)
se6 <- c(0.094,0.032,0.022,0.1,0.196,0.056,0.092)
bh6^2+se6^2
bh1 <- c(0.017,0.012,0.005,0.041,0.135,0.017,0.000)
se1 <- c(0.236,0.069,0.048,0.148,0.167,0.1,0.076)
bh1^2+se1^2
bh2 <- c(0.014,0.006,0.003,0.028,0.041,0.007,0.001)
se2 <- c(0.195,0.051,0.040,0.112,0.132,0.067,0.049)
bh2^2+se2^2
bh3 <- c(0.012,0.006,0.017,0.057,0.022,0.000,0.015)
se3 <- c(0.254,0.079,0.057,0.152,0.177,0.102,0.080)
bh3^2+se3^2
bh4 <- c(0.045,0.018,0.021,0.023,0.115,0.005,0.003)
se4 <- c(0.109,0.028,0.026,0.137,0.250,0.079,0.101)
bh4^2+se4^2
bh5 <- c(0.002,0,0.002,0.032,0.038,0.001,0.005)
se5 <- c(0.092,0.028,0.022,0.121,0.127,0.057,0.078)
bh5^2+se5^2
bh6 <- c(0.030,0.016,0.015,0.073,0.047,0.005,0.021)
se6 <- c(0.108,0.035,0.032,0.154,0.254,0.077,0.117)
bh6^2+se6^2
bh1 <- c(0.009,0.012,0.010,0.032,0.132,0.002,0.004)
se1 <- c(0.254,0.076,0.054,0.124,0.117,0.076,0.058)
bh1^2+se1^2
bh2 <- c(0.002,0.001,0.004,0.021,0.032,0.004,0.001)
se2 <- c(0.147,0.047,0.035,0.120,0.111,0.055,0.041)
bh2^2+se2^2
bh3 <- c(0.016,0.014,0.010,0.066,0.030,0.007,0.006)
se3 <- c(0.227,0.079,0.052,0.169,0.223,0.098,0.077)
bh3^2+se3^2
bh4 <- c(0.027,0.001,0.018,0.030,0.130,0.002,0.006)
se4 <- c(0.120,0.027,0.024,0.123,0.182,0.064,0.083)
bh4^2+se4^2
bh5 <- c(0.001,0.000,0.002,0.026,0.042,0.004,0.000)
se5 <- c(0.073,0.022,0.015,0.102,0.135,0.052,0.063)
bh5^2+se5^2
bh6 <- c(0.038,0.017,0.017,0.077,0.041,0.012,0.011)
se6 <- c(0.103,0.027,0.027,0.155,0.246,0.088,0.106)
bh6^2+se6^2
MKsimdat <- function(n,bet0,psi0,tau,etype=c("normal","student","laplace"),scedast=c("homo","hetero")){
etype <- match.arg(etype,c("normal","student","laplace"))
scedast <- match.arg(scedast,c("homo","hetero"))
k <- length(psi0)
x <- runif(n, -5, 5)
z <- rnorm(n, 1, 1)
X <- matrix(rep(x,k),nrow=n)
PSI <- matrix(rep(psi0,rep(n,k)),ncol=k)
XZ <- cbind(1,z,x,pmax((X-PSI),0))
if(etype == "normal"){
e <- rnorm(n,0,1) - qnorm(tau,0,1)
}else if(etype == "student"){
e <- rt(n,3) - qt(tau,3)
}else if(etype == "laplace"){
e <- rlaplace(n,0,1) - qlaplace(tau,0,1)
}else{
stop("Not a valid error type!")
}
if(scedast == "homo"){
err <- e
}else if(scedast == "hetero"){
err <- e*(1 + 0.2*x)
}else{
stop("Not a valid scedasticity type!")
}
y <- as.vector(XZ %*% bet0) + err
psi <- quantile(x,seq(0,1,l=(k+2)))[-c(1,k+2)]#Initiation of change points
X <- matrix(rep(x,k),nrow=n)
PSI <- matrix(rep(psi,rep(n,k)),ncol=k)
pz <- ifelse(is.null(z), 0, ncol(as.matrix(z)))
U <- pmax((X - PSI), 0)
V <- ifelse((X > PSI), -1, 0)
XZ <- cbind(x,z,U,V)
obj <- rq(y~XZ, tau = tau,method ="br")
bp.ini <- psi
bet.ini <- obj$coefficients[1:(2+pz+k)]#initiation of coefficients
h <- sd(e)*n^(-0.26)#initiation of bandwidth
return(list(x=x,y=y,z=z,h=h,bp.ini=bp.ini,bet.ini=bet.ini))
}
n <- 1000
bet0 <- c(1,1,1,-3,4)
bet <- c(1,1,1,-3,4)
psi <- c(-1,2)
tau1 <- 0.25
tau2 <- 0.5
tau3 <- 0.75
yy <- MKsimdat(n,bet,psi,tau1,etype = "normal",scedast = "homo")
library(quantreg)
yy <- MKsimdat(n,bet,psi,tau1,etype = "normal",scedast = "homo")
View(yy)
plot(yy$x,yy$y)
SmoothVar <- function(x,y,z,tau,h,bet,psi){
n <- length(y)
k <- length(psi)
bet.psi <- bet[3:(2+k)]
p <- ifelse(is.null(z), 0, ncol(as.matrix(z)))
XX <- matrix(rep(x,k),nrow=n)
PSI <- matrix(rep(psi,rep(n,k)),ncol=k)
BET.psi <- matrix(rep(bet.psi,rep(n,k)),ncol=k)
x.psi <- pmax((XX-PSI),0)
M <- cbind(1,x,x.psi,z)
if(p > 0){
Q <- cbind(1,x,(XX-PSI)*pnorm((XX-PSI)/h),z,-BET.psi*(pnorm((XX-PSI)/h)+(XX-PSI)*dnorm((XX-PSI)/h)/h))
}else{
Q <- cbind(1,x,(XX-PSI)*pnorm((XX-PSI)/h),-BET.psi*(pnorm((XX-PSI)/h)+(XX-PSI)*dnorm((XX-PSI)/h)/h))
}
density_fun <- function(y,M,tau,bandwidth_type){
eps <- .Machine$double.eps^(2/3)
if (bandwidth_type == "Bofinger") {
bandwidth <- n^(-1/5) * ((9/2 * dnorm(qnorm(tau))^4)/(2 * qnorm(tau)^2 + 1)^2)^(1/5)
} else if (bandwidth_type == "Chamberlain") {
alpha <- 0.05
bandwidth <- qnorm(1 - tau/2) * sqrt(alpha * (1 - alpha)/n)
} else if (bandwidth_type == "Hall-Sheather") {
alpha <- 0.05
bandwidth <- n^(-1/3) * qnorm(1 - alpha/2)^(2/3) *
((3/2 * dnorm(qnorm(tau))^2)/(2 * qnorm(tau)^2 + 1))^(1/3)
} else {
stop("Not a valid bandwith method!")
}
# Compute the density
# Hendricks and Koenker (1992)
bu <- suppressWarnings(fitted.values(rq(y~M[,-1],tau+bandwidth,method="br")))
bl <- suppressWarnings(fitted.values(rq(y~M[,-1],tau-bandwidth,method="br")))
density <- pmax(0, 2 * bandwidth/((bu - bl) - eps))
return(diag(density))
}
D.achieve <- function(Q,DD,tau){
-tau*(1-tau)*t(Q)%*%DD%*%Q/n
}
C.achieve <- function(Q,tau){
tau*(1-tau)*t(Q)%*%Q/n
}
DD <- density_fun(y,M,tau,bandwidth_type = "Hall-Sheather")
D <- D.achieve(Q,DD,tau)
C <- C.achieve(Q,tau)
psi.Sigma <- n^(-1)*tau*(1-tau)*solve(D)%*%C%*%t(solve(D))
bet.Sigma <- n^(-1)*tau*(1-tau)*solve(D)%*%C%*%t(solve(D))
psi.se.vector <- as.vector(sqrt(diag(psi.Sigma)))
bet.se.vector <- as.vector(sqrt(diag(bet.Sigma)))
return(list(bet.se = bet.se.vector[1:(length(bet.se.vector)-k)],psi.se = psi.se.vector[(length(psi.se.vector)-k+1):length(psi.se.vector)]))
}
y <- data$y
x <- data$x
z <- data$z
h <- data$h
bet.ini <- data$bet.ini
bp.ini <- data$bp.ini
tol <- 1e-8
max.iter <- 5000
yta <- 0.1
a <- 0.5
b <- 2
Result <- SmoothMKQR(x,y,z,tau,h,bet.ini, bp.ini,tol, max.iter,yta,a,b)
source("SmoothIter.R")
path <- "C:/Users/user/Documents/Graduation Project/code/MultiKink R code and read data/EngPaper/Multi-Kink/R"
setwd(path)
source("SmoothIter.R")
Result <- SmoothMKQR(x,y,z,tau,h,bet.ini, bp.ini,tol, max.iter,yta,a,b)
source("LinearPSIIter.R")
Result <- SmoothMKQR(x,y,z,tau,h,bet.ini, bp.ini,tol, max.iter,yta,a,b)
if(is.null(z)){
z <- NULL
}else{
z <- as.matrix(z)
}#For two situations: with or without covariates
n <- length(y)
k <- length(bp.ini)
checkfun <- function(u){
u*(tau-ifelse(u<0, 1, 0))
}
wfun <- function(u, tau) tau-(u<0)
p <- ifelse(is.null(z), 0, ncol(as.matrix(z)))
KernelModel <- function(x,z,psi,h,bet){# produce Kernel Mode of Model
X <- matrix(rep(x,k),nrow=n)
PSI <- matrix(rep(psi,rep(n,k)),ncol=k)
if(is.null(z)){
xzu <- cbind(1,x,(X-PSI)*pnorm((X-PSI)/h))
}else{
xzu <- cbind(1,x,z,(X-PSI)*pnorm((X-PSI)/h))
}
return(xzu%*%bet)
}
psi.result <- psi.est(x,y,z,bp.ini,tau,tol,max.iter,yta)#estimate location of kink(Muggeo Linearization technique)
Coef.new <- bet0 <- bet.ini#initiation of coefficients
Intercept.old <- Intercept <- bet0[1]
Coef.x.old <- Coef.x <- bet0[2]
if(p>0){
Coef.z.old <- Coef.z <- bet0[3:(2+p)]
Coef.z.new <- rep(0,length(Coef.z.old))
}else{
Coef.z.old <- NULL
Coef.z.new <- NULL
}
Coef.Ker.old <- Coef.Ker <- bet0[(3+p):(2+p+k)]
Coef.Ker.new <- rep(0,length(Coef.Ker.old))
iter <- 1
if(is.null(z)){
z <- NULL
}else{
z <- as.matrix(z)
}#For two situations: with or without covariates
n <- length(y)
k <- length(bp.ini)
checkfun <- function(u){
u*(tau-ifelse(u<0, 1, 0))
}
wfun <- function(u, tau) tau-(u<0)
p <- ifelse(is.null(z), 0, ncol(as.matrix(z)))
KernelModel <- function(x,z,psi,h,bet){# produce Kernel Mode of Model
X <- matrix(rep(x,k),nrow=n)
PSI <- matrix(rep(psi,rep(n,k)),ncol=k)
if(is.null(z)){
xzu <- cbind(1,x,(X-PSI)*pnorm((X-PSI)/h))
}else{
xzu <- cbind(1,x,z,(X-PSI)*pnorm((X-PSI)/h))
}
return(xzu%*%bet)
}
psi.result <- psi.est(x,y,z,bp.ini,tau,tol,max.iter,yta)#estimate location of kink(Muggeo Linearization technique)
Coef.new <- bet0 <- bet.ini#initiation of coefficients
Intercept.old <- Intercept <- bet0[1]
Coef.x.old <- Coef.x <- bet0[2]
if(p>0){
Coef.z.old <- Coef.z <- bet0[3:(2+p)]
Coef.z.new <- rep(0,length(Coef.z.old))
}else{
Coef.z.old <- NULL
Coef.z.new <- NULL
}
Coef.Ker.old <- Coef.Ker <- bet0[(3+p):(2+p+k)]
Coef.Ker.new <- rep(0,length(Coef.Ker.old))
iter <- 1
psi.result <- psi.est(x,y,z,bp.ini,tau,tol,max.iter,yta)
X
x
View(x)
n <- 1000
bet <- c(1,1,1,-3,4)
psi <- c(-1,2)
tau <- 0.25
data <- MKsimdat(n,bet,psi,tau1,etype = "normal",scedast = "homo")
y <- data$y
x <- data$x
z <- data$z
h <- data$h
bet.ini <- data$bet.ini
bp.ini <- data$bp.ini
tol <- 1e-8
max.iter <- 5000
yta <- 0.1
a <- 0.5
b <- 2
Result <- SmoothMKQR(x,y,z,tau,h,bet.ini, bp.ini,tol, max.iter,yta,a,b)
Result
VarEst <- SmoothVar(x,y,z,tau,h,Result$coefficients,Result$psi)
VarEst
install.packages(devtools)
install.packages("devtools")
library(MKQRimprove)
install.packages("~/Graduation Project/code/MultiKink R code and read data/EngPaper/MKQRimprove.zip", repos = NULL, type = "win.binary")
library(MKQRimprove)
